// Code generated by protoc-gen-go. DO NOT EDIT.
// source: push.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 推送的消息类型 出牌，叫地主，抢地主，加倍，
type Message struct {
	Type  int32   `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Cards []int32 `protobuf:"varint,2,rep,packed,name=cards" json:"cards,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto1.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Message) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Message) GetCards() []int32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

type PushRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *PushRequest) Reset()                    { *m = PushRequest{} }
func (m *PushRequest) String() string            { return proto1.CompactTextString(m) }
func (*PushRequest) ProtoMessage()               {}
func (*PushRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *PushRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto1.RegisterType((*Message)(nil), "proto.Message")
	proto1.RegisterType((*PushRequest)(nil), "proto.PushRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PushServer service

type PushServerClient interface {
	Fetch(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (PushServer_FetchClient, error)
}

type pushServerClient struct {
	cc *grpc.ClientConn
}

func NewPushServerClient(cc *grpc.ClientConn) PushServerClient {
	return &pushServerClient{cc}
}

func (c *pushServerClient) Fetch(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (PushServer_FetchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PushServer_serviceDesc.Streams[0], c.cc, "/proto.PushServer/Fetch", opts...)
	if err != nil {
		return nil, err
	}
	x := &pushServerFetchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PushServer_FetchClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type pushServerFetchClient struct {
	grpc.ClientStream
}

func (x *pushServerFetchClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PushServer service

type PushServerServer interface {
	Fetch(*PushRequest, PushServer_FetchServer) error
}

func RegisterPushServerServer(s *grpc.Server, srv PushServerServer) {
	s.RegisterService(&_PushServer_serviceDesc, srv)
}

func _PushServer_Fetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PushRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PushServerServer).Fetch(m, &pushServerFetchServer{stream})
}

type PushServer_FetchServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type pushServerFetchServer struct {
	grpc.ServerStream
}

func (x *pushServerFetchServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

var _PushServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PushServer",
	HandlerType: (*PushServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fetch",
			Handler:       _PushServer_Fetch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "push.proto",
}

func init() { proto1.RegisterFile("push.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x28, 0x2d, 0xce,
	0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xc6, 0x5c, 0xec, 0xbe, 0xa9,
	0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x42, 0x42, 0x5c, 0x2c, 0x25, 0x95, 0x05, 0xa9, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0xac, 0x41, 0x60, 0xb6, 0x90, 0x08, 0x17, 0x6b, 0x72, 0x62, 0x51, 0x4a, 0xb1, 0x04,
	0x93, 0x02, 0xb3, 0x06, 0x6b, 0x10, 0x84, 0xa3, 0xa4, 0xcc, 0xc5, 0x1d, 0x50, 0x5a, 0x9c, 0x11,
	0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x02, 0x52, 0x54, 0x92, 0x9f, 0x9d, 0x9a, 0x07, 0xd6, 0xc9,
	0x19, 0x04, 0xe1, 0x18, 0x59, 0x73, 0x71, 0x81, 0x14, 0x05, 0xa7, 0x16, 0x95, 0xa5, 0x16, 0x09,
	0xe9, 0x72, 0xb1, 0xba, 0xa5, 0x96, 0x24, 0x67, 0x08, 0x09, 0x41, 0xec, 0xd7, 0x43, 0x32, 0x40,
	0x8a, 0x0f, 0x2a, 0x06, 0x75, 0x89, 0x01, 0x63, 0x12, 0x1b, 0x58, 0xc0, 0x18, 0x10, 0x00, 0x00,
	0xff, 0xff, 0x16, 0xaa, 0x5c, 0x93, 0xb2, 0x00, 0x00, 0x00,
}
